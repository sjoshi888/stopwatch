// Generated by CodiumAI

describe("Stopwatch", () => {
  // Tests that the timer starts and updates the display every 10 milliseconds
  it("should start the timer and update the display every 10 milliseconds", () => {
    jest.useFakeTimers();
    const stopWatch = new Stopwatch();
    stopWatch.startTimer;
    jest.advanceTimersByTime(10);
    expect(timerElement.innerHTML).toBe("00:00.01");
    jest.advanceTimersByTime(10);
    expect(timerElement.innerHTML).toBe("00:00.02");
    jest.advanceTimersByTime(10);
    expect(timerElement.innerHTML).toBe("00:00.03");
    stopWatch.stopTimer;
  });

  // Tests that the timer is stopped and the interval timer is cleared when stopTimer is called
  it("should stop the timer and clear the interval timer when stopTimer is called", () => {
    const stopwatch = new Stopwatch();
    stopwatch.startTimer;
    stopwatch.stopTimer;
    expect(stopwatch.millisecondsPassed).toBe(0);
    expect(stopwatch.timerRef).toBe(undefined);
  });

  // Tests that the resetTimer method resets the timer and clears the currentLap array
  it("should reset the timer and clear the currentLap array when resetTimer is called", () => {
    const stopWatch = new Stopwatch();
    stopWatch.startTimer;
    stopWatch.addLap;
    stopWatch.resetTimer;
    expect(stopWatch.getLaps).toEqual([]);
    expect(stopWatch.millisecondsPassed).toBe(0);
  });

  // Tests that the 'startTimer' method increments 'millisecondsPassed' every 10 milliseconds
  it("should increment millisecondsPassed every 10 milliseconds", () => {
    jest.useFakeTimers();
    const stopwatch = new Stopwatch();
    stopwatch.startTimer;
    jest.advanceTimersByTime(100);
    expect(stopwatch.millisecondsPassed).toBe(10);
    jest.advanceTimersByTime(100);
    expect(stopwatch.millisecondsPassed).toBe(20);
    jest.advanceTimersByTime(100);
    expect(stopwatch.millisecondsPassed).toBe(30);
    jest.clearAllTimers();
  });

  // Tests that the timer display updates every 10 milliseconds
  it("should update the timer display every 10 milliseconds", () => {
    jest.useFakeTimers();
    const stopWatch = new Stopwatch();
    stopWatch.startTimer;
    jest.advanceTimersByTime(10);
    expect(timerElement.innerHTML).not.toBe("00:00.00");
    jest.advanceTimersByTime(10);
    expect(timerElement.innerHTML).not.toBe("00:00.00");
    jest.advanceTimersByTime(10);
    expect(timerElement.innerHTML).not.toBe("00:00.00");
    stopWatch.stopTimer;
  });

  // Tests that resetTimer sets millisecondsPassed to 0, updates timer display, and clears currentLap array
  it("should set millisecondsPassed to 0, update timer display, and clear currentLap array when resetTimer is called", () => {
    const stopWatch = new Stopwatch();
    stopWatch.startTimer;
    stopWatch.addLap;
    stopWatch.resetTimer;
    expect(stopWatch.millisecondsPassed).toBe(0);
    expect(timerElement.innerHTML).toBe("00:00.00");
    expect(stopWatch.currentLap).toEqual([]);
  });

  // Tests that the stopwatch handles negative values for 'millisecondsPassed' by resetting it to 0 and updating the timer display to '00:00.00'
  it("should reset the timer and update the display when millisecondsPassed is negative", () => {
    const stopWatch = new Stopwatch();
    stopWatch.millisecondsPassed = -100;
    stopWatch.resetTimer;
    expect(stopWatch.millisecondsPassed).toBe(0);
    expect(timerElement.innerHTML).toBe("00:00.00");
  });

  // Tests that the stopwatch handles null or undefined values for the timerElement property by not throwing an error and not updating the timer display.
  it("should not throw an error and not update the timer display when timerElement is null or undefined", () => {
    const stopWatch = new Stopwatch();
    timerElement = null;
    expect(() => {
      stopWatch.startTimer;
    }).not.toThrow();
    expect(timerElement).toBeNull();
  });

  // Tests that the stopwatch handles null or undefined values for getTimeObject by not updating the timer display and not adding the lap data to the currentLap array.
  it("should not update timer display and not add lap data when getTimeObject returns null or undefined", () => {
    const stopWatch = new Stopwatch();
    const timerElement = document.querySelector(".stop-watch__timer");
    const originalInnerHTML = timerElement.innerHTML;
    const originalLapData = stopWatch.getLaps;
    getTimeObject = jest.fn(() => null);
    stopWatch.startTimer;
    stopWatch.addLap;
    expect(timerElement.innerHTML).toBe(originalInnerHTML);
    expect(stopWatch.getLaps).toEqual(originalLapData);
  });

  // Tests that getTimeObject function handles null or undefined values for 'prependToSingleDigit' by returning an object with all values set to '00'.
  it("should return an object with all values set to 00 when prependToSingleDigit is null or undefined", () => {
    const stopwatch = new Stopwatch();
    const timeObject = stopwatch.getTimeObject(null);
    expect(timeObject).toEqual({
      hrs: "00",
      mins: "00",
      seconds: "00",
      milliseconds: "00",
    });
    const timeObject2 = stopwatch.getTimeObject(undefined);
    expect(timeObject2).toEqual({
      hrs: "00",
      mins: "00",
      seconds: "00",
      milliseconds: "00",
    });
  });

  // Tests that calling addLap does not add data to currentLap array when timer is not running
  it("should not add data to currentLap array when timer is not running", () => {
    const stopwatch = new Stopwatch();
    stopwatch.addLap;
    expect(stopwatch.getLaps).toHaveLength(0);
  });

  // Tests that the timer displays the correct time format when it reaches 1 second
  it("should display the correct time format when the timer reaches 1 second", () => {
    jest.useFakeTimers();
    const stopWatch = new Stopwatch();
    stopWatch.startTimer;
    jest.advanceTimersByTime(1000);
    expect(timerElement.innerHTML).toBe("00:01.00");
    stopWatch.stopTimer;
  });

  // Tests that the timer displays the correct format when it reaches 1 minute
  it("should display the correct format when the timer reaches 1 minute", () => {
    const stopWatch = new Stopwatch();
    stopWatch.startTimer;
    stopWatch.millisecondsPassed = 6000;
    const clockData = getTimeObject(stopWatch.millisecondsPassed);
    const { hrs, mins, seconds, milliseconds } = clockData;
    const clockString = `${mins}:${seconds}.${milliseconds}`;
    expect(clockString).toBe("01:00.00");
  });

  // Tests that the 'getLaps' method returns an array of lap data
  it("should return an array of lap data when called", () => {
    const stopWatch = new Stopwatch();
    stopWatch.startTimer;
    stopWatch.addLap;
    stopWatch.stopTimer;
    stopWatch.startTimer;
    stopWatch.addLap;
    stopWatch.stopTimer;
    expect(stopWatch.getLaps).toEqual([
      { hrs: "00", mins: "00", seconds: "00", milliseconds: "01" },
      { hrs: "00", mins: "00", seconds: "00", milliseconds: "02" },
    ]);
  });

  // Tests that the timer displays the correct time format when it reaches 1 millisecond
  it("should display the correct time format when the timer reaches 1 millisecond", () => {
    jest.useFakeTimers();
    const stopWatch = new Stopwatch();
    stopWatch.startTimer;
    jest.advanceTimersByTime(1);
    expect(timerElement.innerHTML).toBe("00:00.01");
    jest.useRealTimers();
  });

  // Tests that the stop and lap buttons are shown when the start button is clicked
  it("should show stop and lap buttons when start button is clicked", () => {
    const stopWatch = new Stopwatch();
    const startButton = document.querySelector(".stop-watch__start-btn");
    const stopButton = document.querySelector(".stop-watch__stop-btn");
    const lapButton = document.querySelector(".stop-watch__lap-btn");

    expect(stopButton.classList.contains("hidden")).toBe(true);
    expect(lapButton.classList.contains("hidden")).toBe(true);

    startButton.click();

    expect(stopButton.classList.contains("hidden")).toBe(false);
    expect(lapButton.classList.contains("hidden")).toBe(false);
  });

  // Tests that the resume and reset buttons are shown when the stop button is clicked
  it("should show resume and reset buttons when stop button is clicked", () => {
    const stopWatch = new Stopwatch();
    const stopButton = document.querySelector(".stop-watch__stop-btn");
    const resumeButton = document.querySelector(".stop-watch__resume-btn");
    const resetButton = document.querySelector(".stop-watch__reset-btn");

    // Click the start button
    const startButton = document.querySelector(".stop-watch__start-btn");
    startButton.click();

    // Click the stop button
    stopButton.click();

    // Check that resume and reset buttons are shown
    expect(resumeButton.classList.contains("hidden")).toBe(false);
    expect(resetButton.classList.contains("hidden")).toBe(false);
  });

  // Tests that clicking the resume button hides it and shows the stop and lap buttons
  it("should hide the resume button and show the stop and lap buttons when the resume button is clicked", () => {
    const stopwatch = new Stopwatch();
    const resumeButton = document.querySelector(".stop-watch__resume-btn");
    const stopButton = document.querySelector(".stop-watch__stop-btn");
    const lapButton = document.querySelector(".stop-watch__lap-btn");

    // Click the resume button
    resumeButton.click();

    // Check that the resume button is hidden
    expect(resumeButton.classList.contains("hidden")).toBe(true);

    // Check that the stop and lap buttons are shown
    expect(stopButton.classList.contains("hidden")).toBe(false);
    expect(lapButton.classList.contains("hidden")).toBe(false);
  });
});
